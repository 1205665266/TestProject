// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:cotti_client/global/entity/config_entity.dart';
import 'package:cotti_client/global/entity/static_text_entity.dart';
import 'package:cotti_client/pages/common/activity/model/activity_results_model.dart';
import 'package:cotti_client/pages/common/activity/model/check_qualification_result_model.dart';
import 'package:cotti_client/pages/common/activity/red_model/share_get_coupon_model_entity.dart';
import 'package:cotti_client/pages/common/address/search_address/entity/address_list_model.dart';
import 'package:cotti_client/pages/common/address/search_address/entity/city_list_model.dart';
import 'package:cotti_client/pages/common/address/search_address/entity/poi_address_model.dart';
import 'package:cotti_client/pages/common/address/take_address/entity/member_address_entity.dart';
import 'package:cotti_client/pages/common/address/take_address/entity/take_address_entity.dart';
import 'package:cotti_client/pages/common/city/entity/city_list_data_entity.dart';
import 'package:cotti_client/pages/common/store/entity/shop_detail_entity.dart';
import 'package:cotti_client/pages/common/store/entity/store_list_data_entity.dart';
import 'package:cotti_client/pages/product/entity/product_detail_entity.dart';
import 'package:cotti_client/pages/product/entity/product_spec_entity.dart';
import 'package:cotti_client/pages/product/entity/spec_list_entity.dart';
import 'package:cotti_client/pages/shopping_cart/entity/cart_goods_item.dart';
import 'package:cotti_client/pages/shopping_cart/entity/cart_params.dart';
import 'package:cotti_client/pages/shopping_cart/entity/shopping_cart_entity.dart';
import 'package:cotti_client/pages/shopping_cart/entity/specials_daily_limit_check_entity.dart';
import 'package:cotti_client/pages/tabs/menu/entity/custom_marketing_label_entity.dart';
import 'package:cotti_client/pages/tabs/menu/entity/marketing_label_entity.dart';
import 'package:cotti_client/pages/tabs/menu/entity/menu_classify.dart';
import 'package:cotti_client/pages/tabs/menu/entity/menu_config_entity.dart';
import 'package:cotti_client/pages/tabs/menu/entity/menu_item_entity.dart';
import 'package:cotti_client/pages/tabs/menu/entity/menu_root_entity.dart';
import 'package:cotti_client/pages/tabs/menu/entity/sku_entity.dart';
import 'package:cotti_client/pages/tabs/menu/entity/spec_entity.dart';
import 'package:cotti_client/pages/tabs/menu/entity/special_activity_limit.dart';
import 'package:cotti_client/pages/tabs/menu/entity/special_price_activity.dart';
import 'package:cotti_client/pages/tabs/menu/search/entity/item_label_model.dart';
import 'package:cotti_client/pages/tabs/menu/search/entity/search_label.dart';
import 'package:cotti_client/pages/tabs/mine/bonus/entity/bonus_detail_entity.dart';
import 'package:cotti_client/pages/tabs/mine/bonus/entity/bonus_log_entity.dart';
import 'package:cotti_client/pages/tabs/mine/cash_coupon/entity/cash_coupon_entity.dart';
import 'package:cotti_client/pages/tabs/mine/cash_coupon/entity/cash_coupon_template_entity.dart';
import 'package:cotti_client/pages/tabs/mine/cash_coupon/entity/cash_coupon_template_sub_entity.dart';
import 'package:cotti_client/pages/tabs/mine/cash_coupon/entity/vocher_template_info_entity.dart';
import 'package:cotti_client/pages/tabs/mine/coupon/coupon_list/entity/coupon_entity.dart';
import 'package:cotti_client/pages/tabs/mine/exchange_coupon/entity/coupon_exchange_entity.dart';
import 'package:cotti_client/pages/tabs/mine/exchange_coupon/entity/validate_entity.dart';
import 'package:cotti_client/pages/tabs/mine/help/entity/last_order_entity.dart';
import 'package:cotti_client/pages/tabs/mine/my/entity/coupon_bounty_entity.dart';
import 'package:cotti_client/pages/tabs/mine/my/entity/coupon_exchange_statement_entity.dart';
import 'package:cotti_client/pages/tabs/mine/my/entity/user_info_entity.dart';
import 'package:cotti_client/pages/tabs/mine/setting/entity/shop_license_entity.dart';
import 'package:cotti_client/pages/tabs/order/entity/order_cancel_reason_model.dart';
import 'package:cotti_client/pages/tabs/order/entity/order_confirm_model_entity.dart';
import 'package:cotti_client/pages/tabs/order/entity/order_coupon_count_model_entity.dart';
import 'package:cotti_client/pages/tabs/order/entity/order_coupon_list_model_entity.dart';
import 'package:cotti_client/pages/tabs/order/entity/order_delivery_detail_model_entity.dart';
import 'package:cotti_client/pages/tabs/order/entity/order_detail_model.dart';
import 'package:cotti_client/pages/tabs/order/entity/order_express.dart';
import 'package:cotti_client/pages/tabs/order/entity/order_model.dart';
import 'package:cotti_client/pages/tabs/order/entity/order_refund_model.dart';
import 'package:cotti_client/pages/tabs/order/entity/order_refund_record_model_entity.dart';
import 'package:cotti_client/pages/tabs/order/entity/order_status_str_entity.dart';
import 'package:cotti_client/pages/tabs/order/entity/order_submit_model_entity.dart';
import 'package:cotti_client/pages/tabs/order/entity/order_url_model.dart';
import 'package:cotti_client/pages/tabs/order/order_confirm/voucher/entity/order_cal_entity.dart';
import 'package:cotti_client/pages/tabs/order/order_confirm/voucher/entity/order_voucher_count_model_entity.dart';
import 'package:cotti_client/pages/tabs/order/order_confirm/voucher/entity/order_voucher_dto_entity.dart';
import 'package:cotti_client/pages/tabs/order/order_confirm/voucher/entity/voucher_sku_model_entity.dart';
import 'package:cotti_client/pages/tabs/order/order_evaluate/entity/evaluate_config_entity.dart';
import 'package:cotti_client/pages/tabs/order/order_evaluate/entity/order_comment_entity_entity.dart';
import 'package:cotti_client/pages/upgrade/upgrade_model_entity.dart';
import 'package:cotti_client/service/location/position_info_entity.dart';
import 'package:cotti_client/service/pay/model/alipay_info_model_model.dart';
import 'package:cotti_client/service/pay/model/alipay_info_model_pay_info.dart';
import 'package:cotti_client/service/pay/model/pay_type_model.dart';
import 'package:cotti_client/service/pay/model/wechat_pay_info_model.dart';
import 'package:cotti_client/widget/banner/model/ad_sort_entity.dart';
import 'package:cotti_client/widget/banner/model/banner_model.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);

class JsonConvert {
	static final Map<String, JsonConvertFunction> convertFuncMap = {
		(ConfigEntity).toString(): ConfigEntity.fromJson,
		(ServiceMode).toString(): ServiceMode.fromJson,
		(FirstOrderFreeShippingGlobal).toString(): FirstOrderFreeShippingGlobal.fromJson,
		(ShopTypeFilter).toString(): ShopTypeFilter.fromJson,
		(InstallationActivity).toString(): InstallationActivity.fromJson,
		(StaticTextEntity).toString(): StaticTextEntity.fromJson,
		(CommonContext).toString(): CommonContext.fromJson,
		(ConfirmOrderPage).toString(): ConfirmOrderPage.fromJson,
		(ActivityResultsModel).toString(): ActivityResultsModel.fromJson,
		(CheckQualificationResultModel).toString(): CheckQualificationResultModel.fromJson,
		(ShareGetCouponModelEntity).toString(): ShareGetCouponModelEntity.fromJson,
		(ShareGetCouponModelWeChatSharingCard).toString(): ShareGetCouponModelWeChatSharingCard.fromJson,
		(ShareGetCouponModelH5SharingCard).toString(): ShareGetCouponModelH5SharingCard.fromJson,
		(ShareGetCouponModelPosterBaseImgList).toString(): ShareGetCouponModelPosterBaseImgList.fromJson,
		(AddressListModel).toString(): AddressListModel.fromJson,
		(AddressListData).toString(): AddressListData.fromJson,
		(CityListModel).toString(): CityListModel.fromJson,
		(CityListData).toString(): CityListData.fromJson,
		(PoiAddressModel).toString(): PoiAddressModel.fromJson,
		(PoiAddressData).toString(): PoiAddressData.fromJson,
		(MemberAddressEntity).toString(): MemberAddressEntity.fromJson,
		(TakeAddressEntity).toString(): TakeAddressEntity.fromJson,
		(CityListDataEntity).toString(): CityListDataEntity.fromJson,
		(CityListDataData).toString(): CityListDataData.fromJson,
		(ShopInfoEntity).toString(): ShopInfoEntity.fromJson,
		(ShopDetail).toString(): ShopDetail.fromJson,
		(CurrentPositionTakeFoodMode).toString(): CurrentPositionTakeFoodMode.fromJson,
		(ShopMatchFailConfig).toString(): ShopMatchFailConfig.fromJson,
		(ShopTypeFrBO).toString(): ShopTypeFrBO.fromJson,
		(GuidanceToBeOpenedContext).toString(): GuidanceToBeOpenedContext.fromJson,
		(StoreListDataEntity).toString(): StoreListDataEntity.fromJson,
		(StoreListDataModel).toString(): StoreListDataModel.fromJson,
		(StoreListDataModelApiConfig).toString(): StoreListDataModelApiConfig.fromJson,
		(StoreListDataModelApiConfigServiceModeList).toString(): StoreListDataModelApiConfigServiceModeList.fromJson,
		(StoreListDataShopTypeFrBos).toString(): StoreListDataShopTypeFrBos.fromJson,
		(ProductDetailEntity).toString(): ProductDetailEntity.fromJson,
		(ProductDetailTopMedias).toString(): ProductDetailTopMedias.fromJson,
		(ProductDetailSkuList).toString(): ProductDetailSkuList.fromJson,
		(ProductDetailRecommendations).toString(): ProductDetailRecommendations.fromJson,
		(ProductDetailIntroMedias).toString(): ProductDetailIntroMedias.fromJson,
		(ProductDetailFirstSku).toString(): ProductDetailFirstSku.fromJson,
		(ProductDetailFirstSkuSkusSpecs).toString(): ProductDetailFirstSkuSkusSpecs.fromJson,
		(ProductDetailFirstSkuBusinessTypes).toString(): ProductDetailFirstSkuBusinessTypes.fromJson,
		(ProductDetailMarketingLabel).toString(): ProductDetailMarketingLabel.fromJson,
		(ProductDetailCustomMarketingLabel).toString(): ProductDetailCustomMarketingLabel.fromJson,
		(ProductDetailProductDesc).toString(): ProductDetailProductDesc.fromJson,
		(ProductDetailProductTipsInfo).toString(): ProductDetailProductTipsInfo.fromJson,
		(ProductSpecEntity).toString(): ProductSpecEntity.fromJson,
		(ProductSpecSpecItems).toString(): ProductSpecSpecItems.fromJson,
		(ProductSpecSpecItemsSpecValueList).toString(): ProductSpecSpecItemsSpecValueList.fromJson,
		(ProductSpecProductDesc).toString(): ProductSpecProductDesc.fromJson,
		(ProductSpecProductTipsInfo).toString(): ProductSpecProductTipsInfo.fromJson,
		(ProductSpecSkuCombinList).toString(): ProductSpecSkuCombinList.fromJson,
		(ProductSpecSkuCombinListSkusSpecs).toString(): ProductSpecSkuCombinListSkusSpecs.fromJson,
		(ProductSpecSkuCombinListBusinessTypes).toString(): ProductSpecSkuCombinListBusinessTypes.fromJson,
		(ProductSpecFirstSku).toString(): ProductSpecFirstSku.fromJson,
		(ProductSpecFirstSkuSkusSpecs).toString(): ProductSpecFirstSkuSkusSpecs.fromJson,
		(ProductSpecFirstSkuBusinessTypes).toString(): ProductSpecFirstSkuBusinessTypes.fromJson,
		(ProductSpecCustomMarketingLabel).toString(): ProductSpecCustomMarketingLabel.fromJson,
		(SpecListEntity).toString(): SpecListEntity.fromJson,
		(SpecListSpecValueList).toString(): SpecListSpecValueList.fromJson,
		(CartGoodsItem).toString(): CartGoodsItem.fromJson,
		(CartParams).toString(): CartParams.fromJson,
		(ShoppingCartEntity).toString(): ShoppingCartEntity.fromJson,
		(GoodsItem).toString(): GoodsItem.fromJson,
		(CouponDiscountTip).toString(): CouponDiscountTip.fromJson,
		(DeliveryDiscountTip).toString(): DeliveryDiscountTip.fromJson,
		(FinanceDetail).toString(): FinanceDetail.fromJson,
		(SpecialsDailyLimitCheckEntity).toString(): SpecialsDailyLimitCheckEntity.fromJson,
		(CustomMarketingLabelEntity).toString(): CustomMarketingLabelEntity.fromJson,
		(MarketingLabelEntity).toString(): MarketingLabelEntity.fromJson,
		(MenuClassify).toString(): MenuClassify.fromJson,
		(MenuConfigEntity).toString(): MenuConfigEntity.fromJson,
		(MenuItemEntity).toString(): MenuItemEntity.fromJson,
		(MenuRootEntity).toString(): MenuRootEntity.fromJson,
		(SkuEntity).toString(): SkuEntity.fromJson,
		(SkuSpec).toString(): SkuSpec.fromJson,
		(SpecEntity).toString(): SpecEntity.fromJson,
		(SpecItem).toString(): SpecItem.fromJson,
		(SpecValue).toString(): SpecValue.fromJson,
		(SpecialActivityLimit).toString(): SpecialActivityLimit.fromJson,
		(SpecialPriceActivity).toString(): SpecialPriceActivity.fromJson,
		(ItemLabelModel).toString(): ItemLabelModel.fromJson,
		(SearchItemLabel).toString(): SearchItemLabel.fromJson,
		(SearchProductParam).toString(): SearchProductParam.fromJson,
		(SearchLabel).toString(): SearchLabel.fromJson,
		(BonusDetailEntity).toString(): BonusDetailEntity.fromJson,
		(BonusLogEntity).toString(): BonusLogEntity.fromJson,
		(CashCouponEntity).toString(): CashCouponEntity.fromJson,
		(CashCouponTemplateEntity).toString(): CashCouponTemplateEntity.fromJson,
		(VoucherTemplateInfo).toString(): VoucherTemplateInfo.fromJson,
		(CashCouponTemplateSubEntity).toString(): CashCouponTemplateSubEntity.fromJson,
		(VocherTemplateInfoEntity).toString(): VocherTemplateInfoEntity.fromJson,
		(CouponEntity).toString(): CouponEntity.fromJson,
		(CouponExchangeEntity).toString(): CouponExchangeEntity.fromJson,
		(ValidateEntity).toString(): ValidateEntity.fromJson,
		(LastOrderEntity).toString(): LastOrderEntity.fromJson,
		(CouponBountyEntity).toString(): CouponBountyEntity.fromJson,
		(CouponBountyCouponMsg).toString(): CouponBountyCouponMsg.fromJson,
		(CouponBountyBountyMsg).toString(): CouponBountyBountyMsg.fromJson,
		(CouponExchangeStatementEntity).toString(): CouponExchangeStatementEntity.fromJson,
		(CouponExchangeStatement).toString(): CouponExchangeStatement.fromJson,
		(UserInfoEntity).toString(): UserInfoEntity.fromJson,
		(ShopLicenseList).toString(): ShopLicenseList.fromJson,
		(ShopLicenseEntity).toString(): ShopLicenseEntity.fromJson,
		(CancelReasonList).toString(): CancelReasonList.fromJson,
		(OrderCancelReasonModel).toString(): OrderCancelReasonModel.fromJson,
		(OrderConfirmModelEntity).toString(): OrderConfirmModelEntity.fromJson,
		(OrderConfirmModelShop).toString(): OrderConfirmModelShop.fromJson,
		(OrderConfirmModelShopBase).toString(): OrderConfirmModelShopBase.fromJson,
		(OrderConfirmModelShopOperation).toString(): OrderConfirmModelShopOperation.fromJson,
		(OrderConfirmModelShopOperationCurrentSaleTimeList).toString(): OrderConfirmModelShopOperationCurrentSaleTimeList.fromJson,
		(OrderConfirmModelShopPosition).toString(): OrderConfirmModelShopPosition.fromJson,
		(OrderConfirmModelShopDeliveryShopDispatcher).toString(): OrderConfirmModelShopDeliveryShopDispatcher.fromJson,
		(OrderConfirmModelConfirmGoodsItems).toString(): OrderConfirmModelConfirmGoodsItems.fromJson,
		(OrderConfirmModelFinanceDetail).toString(): OrderConfirmModelFinanceDetail.fromJson,
		(OrderConfirmModelFinanceDetailDispatchFeeDiscountList).toString(): OrderConfirmModelFinanceDetailDispatchFeeDiscountList.fromJson,
		(OrderCouponCountModelEntity).toString(): OrderCouponCountModelEntity.fromJson,
		(OrderCouponListModelEntity).toString(): OrderCouponListModelEntity.fromJson,
		(OrderCouponListModelConfirmOrderCouponDtoList).toString(): OrderCouponListModelConfirmOrderCouponDtoList.fromJson,
		(OrderDeliveryDetailModelEntity).toString(): OrderDeliveryDetailModelEntity.fromJson,
		(OrderDetailModel).toString(): OrderDetailModel.fromJson,
		(OrderQueryFinance).toString(): OrderQueryFinance.fromJson,
		(OrderQueryExtend).toString(): OrderQueryExtend.fromJson,
		(OrderQueryPay).toString(): OrderQueryPay.fromJson,
		(OrderQueryCancel).toString(): OrderQueryCancel.fromJson,
		(OrderQueryProduct).toString(): OrderQueryProduct.fromJson,
		(OrderDetailModelCancleOrderConfigDTO).toString(): OrderDetailModelCancleOrderConfigDTO.fromJson,
		(OrderDetailModelCancleOrderConfigDTODescription).toString(): OrderDetailModelCancleOrderConfigDTODescription.fromJson,
		(OrderExpress).toString(): OrderExpress.fromJson,
		(DispatchInfo).toString(): DispatchInfo.fromJson,
		(ExpressInfo).toString(): ExpressInfo.fromJson,
		(OrderModels).toString(): OrderModels.fromJson,
		(OrderModel).toString(): OrderModel.fromJson,
		(ProductModel).toString(): ProductModel.fromJson,
		(OrderRefundModel).toString(): OrderRefundModel.fromJson,
		(OrderRefundProductList).toString(): OrderRefundProductList.fromJson,
		(OrderRefundRecordModelEntity).toString(): OrderRefundRecordModelEntity.fromJson,
		(OrderRefundRecordModelOrderQueryProductDTOList).toString(): OrderRefundRecordModelOrderQueryProductDTOList.fromJson,
		(OrderStatusStrEntity).toString(): OrderStatusStrEntity.fromJson,
		(OrderSubmitModelEntity).toString(): OrderSubmitModelEntity.fromJson,
		(OrderSubmitModelUnavailableItemList).toString(): OrderSubmitModelUnavailableItemList.fromJson,
		(OrderSubmitModelSaleableItemList).toString(): OrderSubmitModelSaleableItemList.fromJson,
		(OrderUrlModel).toString(): OrderUrlModel.fromJson,
		(OrderUrlData).toString(): OrderUrlData.fromJson,
		(OrderCalEntity).toString(): OrderCalEntity.fromJson,
		(OrderVoucherCountModelEntity).toString(): OrderVoucherCountModelEntity.fromJson,
		(OrderVoucherDtoEntity).toString(): OrderVoucherDtoEntity.fromJson,
		(VoucherSkuModelEntity).toString(): VoucherSkuModelEntity.fromJson,
		(EvaluateConfigEntity).toString(): EvaluateConfigEntity.fromJson,
		(EvaluateConfigOrderItemList).toString(): EvaluateConfigOrderItemList.fromJson,
		(OrderCommentEntityEntity).toString(): OrderCommentEntityEntity.fromJson,
		(OrderCommentEntityOrderItemCommentList).toString(): OrderCommentEntityOrderItemCommentList.fromJson,
		(UpgradeModelEntity).toString(): UpgradeModelEntity.fromJson,
		(PositionInfoEntity).toString(): PositionInfoEntity.fromJson,
		(AlipayInfoModelModel).toString(): AlipayInfoModelModel.fromJson,
		(AlipayInfoModelPayInfo).toString(): AlipayInfoModelPayInfo.fromJson,
		(PayTypeModel).toString(): PayTypeModel.fromJson,
		(WechatPayInfoModel).toString(): WechatPayInfoModel.fromJson,
		(WechatPayInfoPayInfo).toString(): WechatPayInfoPayInfo.fromJson,
		(AdSortEntity).toString(): AdSortEntity.fromJson,
		(BannerModel).toString(): BannerModel.fromJson,
		(BannerPopup).toString(): BannerPopup.fromJson,
		(BannerFloatWindow).toString(): BannerFloatWindow.fromJson,
	};

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e,enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e,enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError('$type unimplemented');
      }
    }
  }

	//list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<ConfigEntity>[] is M){
			return data.map<ConfigEntity>((Map<String, dynamic> e) => ConfigEntity.fromJson(e)).toList() as M;
		}
		if(<ServiceMode>[] is M){
			return data.map<ServiceMode>((Map<String, dynamic> e) => ServiceMode.fromJson(e)).toList() as M;
		}
		if(<FirstOrderFreeShippingGlobal>[] is M){
			return data.map<FirstOrderFreeShippingGlobal>((Map<String, dynamic> e) => FirstOrderFreeShippingGlobal.fromJson(e)).toList() as M;
		}
		if(<ShopTypeFilter>[] is M){
			return data.map<ShopTypeFilter>((Map<String, dynamic> e) => ShopTypeFilter.fromJson(e)).toList() as M;
		}
		if(<InstallationActivity>[] is M){
			return data.map<InstallationActivity>((Map<String, dynamic> e) => InstallationActivity.fromJson(e)).toList() as M;
		}
		if(<StaticTextEntity>[] is M){
			return data.map<StaticTextEntity>((Map<String, dynamic> e) => StaticTextEntity.fromJson(e)).toList() as M;
		}
		if(<CommonContext>[] is M){
			return data.map<CommonContext>((Map<String, dynamic> e) => CommonContext.fromJson(e)).toList() as M;
		}
		if(<ConfirmOrderPage>[] is M){
			return data.map<ConfirmOrderPage>((Map<String, dynamic> e) => ConfirmOrderPage.fromJson(e)).toList() as M;
		}
		if(<ActivityResultsModel>[] is M){
			return data.map<ActivityResultsModel>((Map<String, dynamic> e) => ActivityResultsModel.fromJson(e)).toList() as M;
		}
		if(<CheckQualificationResultModel>[] is M){
			return data.map<CheckQualificationResultModel>((Map<String, dynamic> e) => CheckQualificationResultModel.fromJson(e)).toList() as M;
		}
		if(<ShareGetCouponModelEntity>[] is M){
			return data.map<ShareGetCouponModelEntity>((Map<String, dynamic> e) => ShareGetCouponModelEntity.fromJson(e)).toList() as M;
		}
		if(<ShareGetCouponModelWeChatSharingCard>[] is M){
			return data.map<ShareGetCouponModelWeChatSharingCard>((Map<String, dynamic> e) => ShareGetCouponModelWeChatSharingCard.fromJson(e)).toList() as M;
		}
		if(<ShareGetCouponModelH5SharingCard>[] is M){
			return data.map<ShareGetCouponModelH5SharingCard>((Map<String, dynamic> e) => ShareGetCouponModelH5SharingCard.fromJson(e)).toList() as M;
		}
		if(<ShareGetCouponModelPosterBaseImgList>[] is M){
			return data.map<ShareGetCouponModelPosterBaseImgList>((Map<String, dynamic> e) => ShareGetCouponModelPosterBaseImgList.fromJson(e)).toList() as M;
		}
		if(<AddressListModel>[] is M){
			return data.map<AddressListModel>((Map<String, dynamic> e) => AddressListModel.fromJson(e)).toList() as M;
		}
		if(<AddressListData>[] is M){
			return data.map<AddressListData>((Map<String, dynamic> e) => AddressListData.fromJson(e)).toList() as M;
		}
		if(<CityListModel>[] is M){
			return data.map<CityListModel>((Map<String, dynamic> e) => CityListModel.fromJson(e)).toList() as M;
		}
		if(<CityListData>[] is M){
			return data.map<CityListData>((Map<String, dynamic> e) => CityListData.fromJson(e)).toList() as M;
		}
		if(<PoiAddressModel>[] is M){
			return data.map<PoiAddressModel>((Map<String, dynamic> e) => PoiAddressModel.fromJson(e)).toList() as M;
		}
		if(<PoiAddressData>[] is M){
			return data.map<PoiAddressData>((Map<String, dynamic> e) => PoiAddressData.fromJson(e)).toList() as M;
		}
		if(<MemberAddressEntity>[] is M){
			return data.map<MemberAddressEntity>((Map<String, dynamic> e) => MemberAddressEntity.fromJson(e)).toList() as M;
		}
		if(<TakeAddressEntity>[] is M){
			return data.map<TakeAddressEntity>((Map<String, dynamic> e) => TakeAddressEntity.fromJson(e)).toList() as M;
		}
		if(<CityListDataEntity>[] is M){
			return data.map<CityListDataEntity>((Map<String, dynamic> e) => CityListDataEntity.fromJson(e)).toList() as M;
		}
		if(<CityListDataData>[] is M){
			return data.map<CityListDataData>((Map<String, dynamic> e) => CityListDataData.fromJson(e)).toList() as M;
		}
		if(<ShopInfoEntity>[] is M){
			return data.map<ShopInfoEntity>((Map<String, dynamic> e) => ShopInfoEntity.fromJson(e)).toList() as M;
		}
		if(<ShopDetail>[] is M){
			return data.map<ShopDetail>((Map<String, dynamic> e) => ShopDetail.fromJson(e)).toList() as M;
		}
		if(<CurrentPositionTakeFoodMode>[] is M){
			return data.map<CurrentPositionTakeFoodMode>((Map<String, dynamic> e) => CurrentPositionTakeFoodMode.fromJson(e)).toList() as M;
		}
		if(<ShopMatchFailConfig>[] is M){
			return data.map<ShopMatchFailConfig>((Map<String, dynamic> e) => ShopMatchFailConfig.fromJson(e)).toList() as M;
		}
		if(<ShopTypeFrBO>[] is M){
			return data.map<ShopTypeFrBO>((Map<String, dynamic> e) => ShopTypeFrBO.fromJson(e)).toList() as M;
		}
		if(<GuidanceToBeOpenedContext>[] is M){
			return data.map<GuidanceToBeOpenedContext>((Map<String, dynamic> e) => GuidanceToBeOpenedContext.fromJson(e)).toList() as M;
		}
		if(<StoreListDataEntity>[] is M){
			return data.map<StoreListDataEntity>((Map<String, dynamic> e) => StoreListDataEntity.fromJson(e)).toList() as M;
		}
		if(<StoreListDataModel>[] is M){
			return data.map<StoreListDataModel>((Map<String, dynamic> e) => StoreListDataModel.fromJson(e)).toList() as M;
		}
		if(<StoreListDataModelApiConfig>[] is M){
			return data.map<StoreListDataModelApiConfig>((Map<String, dynamic> e) => StoreListDataModelApiConfig.fromJson(e)).toList() as M;
		}
		if(<StoreListDataModelApiConfigServiceModeList>[] is M){
			return data.map<StoreListDataModelApiConfigServiceModeList>((Map<String, dynamic> e) => StoreListDataModelApiConfigServiceModeList.fromJson(e)).toList() as M;
		}
		if(<StoreListDataShopTypeFrBos>[] is M){
			return data.map<StoreListDataShopTypeFrBos>((Map<String, dynamic> e) => StoreListDataShopTypeFrBos.fromJson(e)).toList() as M;
		}
		if(<ProductDetailEntity>[] is M){
			return data.map<ProductDetailEntity>((Map<String, dynamic> e) => ProductDetailEntity.fromJson(e)).toList() as M;
		}
		if(<ProductDetailTopMedias>[] is M){
			return data.map<ProductDetailTopMedias>((Map<String, dynamic> e) => ProductDetailTopMedias.fromJson(e)).toList() as M;
		}
		if(<ProductDetailSkuList>[] is M){
			return data.map<ProductDetailSkuList>((Map<String, dynamic> e) => ProductDetailSkuList.fromJson(e)).toList() as M;
		}
		if(<ProductDetailRecommendations>[] is M){
			return data.map<ProductDetailRecommendations>((Map<String, dynamic> e) => ProductDetailRecommendations.fromJson(e)).toList() as M;
		}
		if(<ProductDetailIntroMedias>[] is M){
			return data.map<ProductDetailIntroMedias>((Map<String, dynamic> e) => ProductDetailIntroMedias.fromJson(e)).toList() as M;
		}
		if(<ProductDetailFirstSku>[] is M){
			return data.map<ProductDetailFirstSku>((Map<String, dynamic> e) => ProductDetailFirstSku.fromJson(e)).toList() as M;
		}
		if(<ProductDetailFirstSkuSkusSpecs>[] is M){
			return data.map<ProductDetailFirstSkuSkusSpecs>((Map<String, dynamic> e) => ProductDetailFirstSkuSkusSpecs.fromJson(e)).toList() as M;
		}
		if(<ProductDetailFirstSkuBusinessTypes>[] is M){
			return data.map<ProductDetailFirstSkuBusinessTypes>((Map<String, dynamic> e) => ProductDetailFirstSkuBusinessTypes.fromJson(e)).toList() as M;
		}
		if(<ProductDetailMarketingLabel>[] is M){
			return data.map<ProductDetailMarketingLabel>((Map<String, dynamic> e) => ProductDetailMarketingLabel.fromJson(e)).toList() as M;
		}
		if(<ProductDetailCustomMarketingLabel>[] is M){
			return data.map<ProductDetailCustomMarketingLabel>((Map<String, dynamic> e) => ProductDetailCustomMarketingLabel.fromJson(e)).toList() as M;
		}
		if(<ProductDetailProductDesc>[] is M){
			return data.map<ProductDetailProductDesc>((Map<String, dynamic> e) => ProductDetailProductDesc.fromJson(e)).toList() as M;
		}
		if(<ProductDetailProductTipsInfo>[] is M){
			return data.map<ProductDetailProductTipsInfo>((Map<String, dynamic> e) => ProductDetailProductTipsInfo.fromJson(e)).toList() as M;
		}
		if(<ProductSpecEntity>[] is M){
			return data.map<ProductSpecEntity>((Map<String, dynamic> e) => ProductSpecEntity.fromJson(e)).toList() as M;
		}
		if(<ProductSpecSpecItems>[] is M){
			return data.map<ProductSpecSpecItems>((Map<String, dynamic> e) => ProductSpecSpecItems.fromJson(e)).toList() as M;
		}
		if(<ProductSpecSpecItemsSpecValueList>[] is M){
			return data.map<ProductSpecSpecItemsSpecValueList>((Map<String, dynamic> e) => ProductSpecSpecItemsSpecValueList.fromJson(e)).toList() as M;
		}
		if(<ProductSpecProductDesc>[] is M){
			return data.map<ProductSpecProductDesc>((Map<String, dynamic> e) => ProductSpecProductDesc.fromJson(e)).toList() as M;
		}
		if(<ProductSpecProductTipsInfo>[] is M){
			return data.map<ProductSpecProductTipsInfo>((Map<String, dynamic> e) => ProductSpecProductTipsInfo.fromJson(e)).toList() as M;
		}
		if(<ProductSpecSkuCombinList>[] is M){
			return data.map<ProductSpecSkuCombinList>((Map<String, dynamic> e) => ProductSpecSkuCombinList.fromJson(e)).toList() as M;
		}
		if(<ProductSpecSkuCombinListSkusSpecs>[] is M){
			return data.map<ProductSpecSkuCombinListSkusSpecs>((Map<String, dynamic> e) => ProductSpecSkuCombinListSkusSpecs.fromJson(e)).toList() as M;
		}
		if(<ProductSpecSkuCombinListBusinessTypes>[] is M){
			return data.map<ProductSpecSkuCombinListBusinessTypes>((Map<String, dynamic> e) => ProductSpecSkuCombinListBusinessTypes.fromJson(e)).toList() as M;
		}
		if(<ProductSpecFirstSku>[] is M){
			return data.map<ProductSpecFirstSku>((Map<String, dynamic> e) => ProductSpecFirstSku.fromJson(e)).toList() as M;
		}
		if(<ProductSpecFirstSkuSkusSpecs>[] is M){
			return data.map<ProductSpecFirstSkuSkusSpecs>((Map<String, dynamic> e) => ProductSpecFirstSkuSkusSpecs.fromJson(e)).toList() as M;
		}
		if(<ProductSpecFirstSkuBusinessTypes>[] is M){
			return data.map<ProductSpecFirstSkuBusinessTypes>((Map<String, dynamic> e) => ProductSpecFirstSkuBusinessTypes.fromJson(e)).toList() as M;
		}
		if(<ProductSpecCustomMarketingLabel>[] is M){
			return data.map<ProductSpecCustomMarketingLabel>((Map<String, dynamic> e) => ProductSpecCustomMarketingLabel.fromJson(e)).toList() as M;
		}
		if(<SpecListEntity>[] is M){
			return data.map<SpecListEntity>((Map<String, dynamic> e) => SpecListEntity.fromJson(e)).toList() as M;
		}
		if(<SpecListSpecValueList>[] is M){
			return data.map<SpecListSpecValueList>((Map<String, dynamic> e) => SpecListSpecValueList.fromJson(e)).toList() as M;
		}
		if(<CartGoodsItem>[] is M){
			return data.map<CartGoodsItem>((Map<String, dynamic> e) => CartGoodsItem.fromJson(e)).toList() as M;
		}
		if(<CartParams>[] is M){
			return data.map<CartParams>((Map<String, dynamic> e) => CartParams.fromJson(e)).toList() as M;
		}
		if(<ShoppingCartEntity>[] is M){
			return data.map<ShoppingCartEntity>((Map<String, dynamic> e) => ShoppingCartEntity.fromJson(e)).toList() as M;
		}
		if(<GoodsItem>[] is M){
			return data.map<GoodsItem>((Map<String, dynamic> e) => GoodsItem.fromJson(e)).toList() as M;
		}
		if(<CouponDiscountTip>[] is M){
			return data.map<CouponDiscountTip>((Map<String, dynamic> e) => CouponDiscountTip.fromJson(e)).toList() as M;
		}
		if(<DeliveryDiscountTip>[] is M){
			return data.map<DeliveryDiscountTip>((Map<String, dynamic> e) => DeliveryDiscountTip.fromJson(e)).toList() as M;
		}
		if(<FinanceDetail>[] is M){
			return data.map<FinanceDetail>((Map<String, dynamic> e) => FinanceDetail.fromJson(e)).toList() as M;
		}
		if(<SpecialsDailyLimitCheckEntity>[] is M){
			return data.map<SpecialsDailyLimitCheckEntity>((Map<String, dynamic> e) => SpecialsDailyLimitCheckEntity.fromJson(e)).toList() as M;
		}
		if(<CustomMarketingLabelEntity>[] is M){
			return data.map<CustomMarketingLabelEntity>((Map<String, dynamic> e) => CustomMarketingLabelEntity.fromJson(e)).toList() as M;
		}
		if(<MarketingLabelEntity>[] is M){
			return data.map<MarketingLabelEntity>((Map<String, dynamic> e) => MarketingLabelEntity.fromJson(e)).toList() as M;
		}
		if(<MenuClassify>[] is M){
			return data.map<MenuClassify>((Map<String, dynamic> e) => MenuClassify.fromJson(e)).toList() as M;
		}
		if(<MenuConfigEntity>[] is M){
			return data.map<MenuConfigEntity>((Map<String, dynamic> e) => MenuConfigEntity.fromJson(e)).toList() as M;
		}
		if(<MenuItemEntity>[] is M){
			return data.map<MenuItemEntity>((Map<String, dynamic> e) => MenuItemEntity.fromJson(e)).toList() as M;
		}
		if(<MenuRootEntity>[] is M){
			return data.map<MenuRootEntity>((Map<String, dynamic> e) => MenuRootEntity.fromJson(e)).toList() as M;
		}
		if(<SkuEntity>[] is M){
			return data.map<SkuEntity>((Map<String, dynamic> e) => SkuEntity.fromJson(e)).toList() as M;
		}
		if(<SkuSpec>[] is M){
			return data.map<SkuSpec>((Map<String, dynamic> e) => SkuSpec.fromJson(e)).toList() as M;
		}
		if(<SpecEntity>[] is M){
			return data.map<SpecEntity>((Map<String, dynamic> e) => SpecEntity.fromJson(e)).toList() as M;
		}
		if(<SpecItem>[] is M){
			return data.map<SpecItem>((Map<String, dynamic> e) => SpecItem.fromJson(e)).toList() as M;
		}
		if(<SpecValue>[] is M){
			return data.map<SpecValue>((Map<String, dynamic> e) => SpecValue.fromJson(e)).toList() as M;
		}
		if(<SpecialActivityLimit>[] is M){
			return data.map<SpecialActivityLimit>((Map<String, dynamic> e) => SpecialActivityLimit.fromJson(e)).toList() as M;
		}
		if(<SpecialPriceActivity>[] is M){
			return data.map<SpecialPriceActivity>((Map<String, dynamic> e) => SpecialPriceActivity.fromJson(e)).toList() as M;
		}
		if(<ItemLabelModel>[] is M){
			return data.map<ItemLabelModel>((Map<String, dynamic> e) => ItemLabelModel.fromJson(e)).toList() as M;
		}
		if(<SearchItemLabel>[] is M){
			return data.map<SearchItemLabel>((Map<String, dynamic> e) => SearchItemLabel.fromJson(e)).toList() as M;
		}
		if(<SearchProductParam>[] is M){
			return data.map<SearchProductParam>((Map<String, dynamic> e) => SearchProductParam.fromJson(e)).toList() as M;
		}
		if(<SearchLabel>[] is M){
			return data.map<SearchLabel>((Map<String, dynamic> e) => SearchLabel.fromJson(e)).toList() as M;
		}
		if(<BonusDetailEntity>[] is M){
			return data.map<BonusDetailEntity>((Map<String, dynamic> e) => BonusDetailEntity.fromJson(e)).toList() as M;
		}
		if(<BonusLogEntity>[] is M){
			return data.map<BonusLogEntity>((Map<String, dynamic> e) => BonusLogEntity.fromJson(e)).toList() as M;
		}
		if(<CashCouponEntity>[] is M){
			return data.map<CashCouponEntity>((Map<String, dynamic> e) => CashCouponEntity.fromJson(e)).toList() as M;
		}
		if(<CashCouponTemplateEntity>[] is M){
			return data.map<CashCouponTemplateEntity>((Map<String, dynamic> e) => CashCouponTemplateEntity.fromJson(e)).toList() as M;
		}
		if(<VoucherTemplateInfo>[] is M){
			return data.map<VoucherTemplateInfo>((Map<String, dynamic> e) => VoucherTemplateInfo.fromJson(e)).toList() as M;
		}
		if(<CashCouponTemplateSubEntity>[] is M){
			return data.map<CashCouponTemplateSubEntity>((Map<String, dynamic> e) => CashCouponTemplateSubEntity.fromJson(e)).toList() as M;
		}
		if(<VocherTemplateInfoEntity>[] is M){
			return data.map<VocherTemplateInfoEntity>((Map<String, dynamic> e) => VocherTemplateInfoEntity.fromJson(e)).toList() as M;
		}
		if(<CouponEntity>[] is M){
			return data.map<CouponEntity>((Map<String, dynamic> e) => CouponEntity.fromJson(e)).toList() as M;
		}
		if(<CouponExchangeEntity>[] is M){
			return data.map<CouponExchangeEntity>((Map<String, dynamic> e) => CouponExchangeEntity.fromJson(e)).toList() as M;
		}
		if(<ValidateEntity>[] is M){
			return data.map<ValidateEntity>((Map<String, dynamic> e) => ValidateEntity.fromJson(e)).toList() as M;
		}
		if(<LastOrderEntity>[] is M){
			return data.map<LastOrderEntity>((Map<String, dynamic> e) => LastOrderEntity.fromJson(e)).toList() as M;
		}
		if(<CouponBountyEntity>[] is M){
			return data.map<CouponBountyEntity>((Map<String, dynamic> e) => CouponBountyEntity.fromJson(e)).toList() as M;
		}
		if(<CouponBountyCouponMsg>[] is M){
			return data.map<CouponBountyCouponMsg>((Map<String, dynamic> e) => CouponBountyCouponMsg.fromJson(e)).toList() as M;
		}
		if(<CouponBountyBountyMsg>[] is M){
			return data.map<CouponBountyBountyMsg>((Map<String, dynamic> e) => CouponBountyBountyMsg.fromJson(e)).toList() as M;
		}
		if(<CouponExchangeStatementEntity>[] is M){
			return data.map<CouponExchangeStatementEntity>((Map<String, dynamic> e) => CouponExchangeStatementEntity.fromJson(e)).toList() as M;
		}
		if(<CouponExchangeStatement>[] is M){
			return data.map<CouponExchangeStatement>((Map<String, dynamic> e) => CouponExchangeStatement.fromJson(e)).toList() as M;
		}
		if(<UserInfoEntity>[] is M){
			return data.map<UserInfoEntity>((Map<String, dynamic> e) => UserInfoEntity.fromJson(e)).toList() as M;
		}
		if(<ShopLicenseList>[] is M){
			return data.map<ShopLicenseList>((Map<String, dynamic> e) => ShopLicenseList.fromJson(e)).toList() as M;
		}
		if(<ShopLicenseEntity>[] is M){
			return data.map<ShopLicenseEntity>((Map<String, dynamic> e) => ShopLicenseEntity.fromJson(e)).toList() as M;
		}
		if(<CancelReasonList>[] is M){
			return data.map<CancelReasonList>((Map<String, dynamic> e) => CancelReasonList.fromJson(e)).toList() as M;
		}
		if(<OrderCancelReasonModel>[] is M){
			return data.map<OrderCancelReasonModel>((Map<String, dynamic> e) => OrderCancelReasonModel.fromJson(e)).toList() as M;
		}
		if(<OrderConfirmModelEntity>[] is M){
			return data.map<OrderConfirmModelEntity>((Map<String, dynamic> e) => OrderConfirmModelEntity.fromJson(e)).toList() as M;
		}
		if(<OrderConfirmModelShop>[] is M){
			return data.map<OrderConfirmModelShop>((Map<String, dynamic> e) => OrderConfirmModelShop.fromJson(e)).toList() as M;
		}
		if(<OrderConfirmModelShopBase>[] is M){
			return data.map<OrderConfirmModelShopBase>((Map<String, dynamic> e) => OrderConfirmModelShopBase.fromJson(e)).toList() as M;
		}
		if(<OrderConfirmModelShopOperation>[] is M){
			return data.map<OrderConfirmModelShopOperation>((Map<String, dynamic> e) => OrderConfirmModelShopOperation.fromJson(e)).toList() as M;
		}
		if(<OrderConfirmModelShopOperationCurrentSaleTimeList>[] is M){
			return data.map<OrderConfirmModelShopOperationCurrentSaleTimeList>((Map<String, dynamic> e) => OrderConfirmModelShopOperationCurrentSaleTimeList.fromJson(e)).toList() as M;
		}
		if(<OrderConfirmModelShopPosition>[] is M){
			return data.map<OrderConfirmModelShopPosition>((Map<String, dynamic> e) => OrderConfirmModelShopPosition.fromJson(e)).toList() as M;
		}
		if(<OrderConfirmModelShopDeliveryShopDispatcher>[] is M){
			return data.map<OrderConfirmModelShopDeliveryShopDispatcher>((Map<String, dynamic> e) => OrderConfirmModelShopDeliveryShopDispatcher.fromJson(e)).toList() as M;
		}
		if(<OrderConfirmModelConfirmGoodsItems>[] is M){
			return data.map<OrderConfirmModelConfirmGoodsItems>((Map<String, dynamic> e) => OrderConfirmModelConfirmGoodsItems.fromJson(e)).toList() as M;
		}
		if(<OrderConfirmModelFinanceDetail>[] is M){
			return data.map<OrderConfirmModelFinanceDetail>((Map<String, dynamic> e) => OrderConfirmModelFinanceDetail.fromJson(e)).toList() as M;
		}
		if(<OrderConfirmModelFinanceDetailDispatchFeeDiscountList>[] is M){
			return data.map<OrderConfirmModelFinanceDetailDispatchFeeDiscountList>((Map<String, dynamic> e) => OrderConfirmModelFinanceDetailDispatchFeeDiscountList.fromJson(e)).toList() as M;
		}
		if(<OrderCouponCountModelEntity>[] is M){
			return data.map<OrderCouponCountModelEntity>((Map<String, dynamic> e) => OrderCouponCountModelEntity.fromJson(e)).toList() as M;
		}
		if(<OrderCouponListModelEntity>[] is M){
			return data.map<OrderCouponListModelEntity>((Map<String, dynamic> e) => OrderCouponListModelEntity.fromJson(e)).toList() as M;
		}
		if(<OrderCouponListModelConfirmOrderCouponDtoList>[] is M){
			return data.map<OrderCouponListModelConfirmOrderCouponDtoList>((Map<String, dynamic> e) => OrderCouponListModelConfirmOrderCouponDtoList.fromJson(e)).toList() as M;
		}
		if(<OrderDeliveryDetailModelEntity>[] is M){
			return data.map<OrderDeliveryDetailModelEntity>((Map<String, dynamic> e) => OrderDeliveryDetailModelEntity.fromJson(e)).toList() as M;
		}
		if(<OrderDetailModel>[] is M){
			return data.map<OrderDetailModel>((Map<String, dynamic> e) => OrderDetailModel.fromJson(e)).toList() as M;
		}
		if(<OrderQueryFinance>[] is M){
			return data.map<OrderQueryFinance>((Map<String, dynamic> e) => OrderQueryFinance.fromJson(e)).toList() as M;
		}
		if(<OrderQueryExtend>[] is M){
			return data.map<OrderQueryExtend>((Map<String, dynamic> e) => OrderQueryExtend.fromJson(e)).toList() as M;
		}
		if(<OrderQueryPay>[] is M){
			return data.map<OrderQueryPay>((Map<String, dynamic> e) => OrderQueryPay.fromJson(e)).toList() as M;
		}
		if(<OrderQueryCancel>[] is M){
			return data.map<OrderQueryCancel>((Map<String, dynamic> e) => OrderQueryCancel.fromJson(e)).toList() as M;
		}
		if(<OrderQueryProduct>[] is M){
			return data.map<OrderQueryProduct>((Map<String, dynamic> e) => OrderQueryProduct.fromJson(e)).toList() as M;
		}
		if(<OrderDetailModelCancleOrderConfigDTO>[] is M){
			return data.map<OrderDetailModelCancleOrderConfigDTO>((Map<String, dynamic> e) => OrderDetailModelCancleOrderConfigDTO.fromJson(e)).toList() as M;
		}
		if(<OrderDetailModelCancleOrderConfigDTODescription>[] is M){
			return data.map<OrderDetailModelCancleOrderConfigDTODescription>((Map<String, dynamic> e) => OrderDetailModelCancleOrderConfigDTODescription.fromJson(e)).toList() as M;
		}
		if(<OrderExpress>[] is M){
			return data.map<OrderExpress>((Map<String, dynamic> e) => OrderExpress.fromJson(e)).toList() as M;
		}
		if(<DispatchInfo>[] is M){
			return data.map<DispatchInfo>((Map<String, dynamic> e) => DispatchInfo.fromJson(e)).toList() as M;
		}
		if(<ExpressInfo>[] is M){
			return data.map<ExpressInfo>((Map<String, dynamic> e) => ExpressInfo.fromJson(e)).toList() as M;
		}
		if(<OrderModels>[] is M){
			return data.map<OrderModels>((Map<String, dynamic> e) => OrderModels.fromJson(e)).toList() as M;
		}
		if(<OrderModel>[] is M){
			return data.map<OrderModel>((Map<String, dynamic> e) => OrderModel.fromJson(e)).toList() as M;
		}
		if(<ProductModel>[] is M){
			return data.map<ProductModel>((Map<String, dynamic> e) => ProductModel.fromJson(e)).toList() as M;
		}
		if(<OrderRefundModel>[] is M){
			return data.map<OrderRefundModel>((Map<String, dynamic> e) => OrderRefundModel.fromJson(e)).toList() as M;
		}
		if(<OrderRefundProductList>[] is M){
			return data.map<OrderRefundProductList>((Map<String, dynamic> e) => OrderRefundProductList.fromJson(e)).toList() as M;
		}
		if(<OrderRefundRecordModelEntity>[] is M){
			return data.map<OrderRefundRecordModelEntity>((Map<String, dynamic> e) => OrderRefundRecordModelEntity.fromJson(e)).toList() as M;
		}
		if(<OrderRefundRecordModelOrderQueryProductDTOList>[] is M){
			return data.map<OrderRefundRecordModelOrderQueryProductDTOList>((Map<String, dynamic> e) => OrderRefundRecordModelOrderQueryProductDTOList.fromJson(e)).toList() as M;
		}
		if(<OrderStatusStrEntity>[] is M){
			return data.map<OrderStatusStrEntity>((Map<String, dynamic> e) => OrderStatusStrEntity.fromJson(e)).toList() as M;
		}
		if(<OrderSubmitModelEntity>[] is M){
			return data.map<OrderSubmitModelEntity>((Map<String, dynamic> e) => OrderSubmitModelEntity.fromJson(e)).toList() as M;
		}
		if(<OrderSubmitModelUnavailableItemList>[] is M){
			return data.map<OrderSubmitModelUnavailableItemList>((Map<String, dynamic> e) => OrderSubmitModelUnavailableItemList.fromJson(e)).toList() as M;
		}
		if(<OrderSubmitModelSaleableItemList>[] is M){
			return data.map<OrderSubmitModelSaleableItemList>((Map<String, dynamic> e) => OrderSubmitModelSaleableItemList.fromJson(e)).toList() as M;
		}
		if(<OrderUrlModel>[] is M){
			return data.map<OrderUrlModel>((Map<String, dynamic> e) => OrderUrlModel.fromJson(e)).toList() as M;
		}
		if(<OrderUrlData>[] is M){
			return data.map<OrderUrlData>((Map<String, dynamic> e) => OrderUrlData.fromJson(e)).toList() as M;
		}
		if(<OrderCalEntity>[] is M){
			return data.map<OrderCalEntity>((Map<String, dynamic> e) => OrderCalEntity.fromJson(e)).toList() as M;
		}
		if(<OrderVoucherCountModelEntity>[] is M){
			return data.map<OrderVoucherCountModelEntity>((Map<String, dynamic> e) => OrderVoucherCountModelEntity.fromJson(e)).toList() as M;
		}
		if(<OrderVoucherDtoEntity>[] is M){
			return data.map<OrderVoucherDtoEntity>((Map<String, dynamic> e) => OrderVoucherDtoEntity.fromJson(e)).toList() as M;
		}
		if(<VoucherSkuModelEntity>[] is M){
			return data.map<VoucherSkuModelEntity>((Map<String, dynamic> e) => VoucherSkuModelEntity.fromJson(e)).toList() as M;
		}
		if(<EvaluateConfigEntity>[] is M){
			return data.map<EvaluateConfigEntity>((Map<String, dynamic> e) => EvaluateConfigEntity.fromJson(e)).toList() as M;
		}
		if(<EvaluateConfigOrderItemList>[] is M){
			return data.map<EvaluateConfigOrderItemList>((Map<String, dynamic> e) => EvaluateConfigOrderItemList.fromJson(e)).toList() as M;
		}
		if(<OrderCommentEntityEntity>[] is M){
			return data.map<OrderCommentEntityEntity>((Map<String, dynamic> e) => OrderCommentEntityEntity.fromJson(e)).toList() as M;
		}
		if(<OrderCommentEntityOrderItemCommentList>[] is M){
			return data.map<OrderCommentEntityOrderItemCommentList>((Map<String, dynamic> e) => OrderCommentEntityOrderItemCommentList.fromJson(e)).toList() as M;
		}
		if(<UpgradeModelEntity>[] is M){
			return data.map<UpgradeModelEntity>((Map<String, dynamic> e) => UpgradeModelEntity.fromJson(e)).toList() as M;
		}
		if(<PositionInfoEntity>[] is M){
			return data.map<PositionInfoEntity>((Map<String, dynamic> e) => PositionInfoEntity.fromJson(e)).toList() as M;
		}
		if(<AlipayInfoModelModel>[] is M){
			return data.map<AlipayInfoModelModel>((Map<String, dynamic> e) => AlipayInfoModelModel.fromJson(e)).toList() as M;
		}
		if(<AlipayInfoModelPayInfo>[] is M){
			return data.map<AlipayInfoModelPayInfo>((Map<String, dynamic> e) => AlipayInfoModelPayInfo.fromJson(e)).toList() as M;
		}
		if(<PayTypeModel>[] is M){
			return data.map<PayTypeModel>((Map<String, dynamic> e) => PayTypeModel.fromJson(e)).toList() as M;
		}
		if(<WechatPayInfoModel>[] is M){
			return data.map<WechatPayInfoModel>((Map<String, dynamic> e) => WechatPayInfoModel.fromJson(e)).toList() as M;
		}
		if(<WechatPayInfoPayInfo>[] is M){
			return data.map<WechatPayInfoPayInfo>((Map<String, dynamic> e) => WechatPayInfoPayInfo.fromJson(e)).toList() as M;
		}
		if(<AdSortEntity>[] is M){
			return data.map<AdSortEntity>((Map<String, dynamic> e) => AdSortEntity.fromJson(e)).toList() as M;
		}
		if(<BannerModel>[] is M){
			return data.map<BannerModel>((Map<String, dynamic> e) => BannerModel.fromJson(e)).toList() as M;
		}
		if(<BannerPopup>[] is M){
			return data.map<BannerPopup>((Map<String, dynamic> e) => BannerPopup.fromJson(e)).toList() as M;
		}
		if(<BannerFloatWindow>[] is M){
			return data.map<BannerFloatWindow>((Map<String, dynamic> e) => BannerFloatWindow.fromJson(e)).toList() as M;
		}

		debugPrint("${M.toString()} not found");
	
		return null;
}

	static M? fromJsonAsT<M>(dynamic json) {
		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return jsonConvert.convert<M>(json);
		}
	}
}